# -*- coding: utf-8 -*-
"""RITABRITA KARMAKAR_CSE_3RD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hIp9OSsU18zjjh_Ag5xrTc853k8GKqUC

**Seaborn (sns) and Matplotlib (plt) will be used for creating various types of plots and visualizations.
Numpy (np) is used for numerical operations and managing data arrays.
Pandas (pd) will be used for data manipulation, such as reading and processing data.
Streamlit (st) enables the creation of interactive web applications for visualizing and sharing data insights.**
"""

import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import streamlit as st

from google.colab import files
uploaded=files.upload()

"""**READ THE DATASET**"""

df=pd.read_csv('cities_r2.csv')
df

"""**The 'child_sex_ratio' column has been removed from the dataset.**
**df_subset now contains all columns except 'child_sex_ratio'.**
*SECTION-A* - 1.
"""

df_subset = df.drop(columns=['child_sex_ratio'])
df_subset

"""**The 'column_headings' list contains the names of all columns in the DataFrame.**
*SECTION-A*- 2.
"""

column_headings = df.columns.tolist()
print(column_headings)

"""**The DataFrame 'sorted_df' is sorted based on the 'state_name' column.**
**This will arrange the rows in alphabetical order of state names.**
*SECTION-A* - 3.
"""

sorted_df = df.sort_values(by='state_name')
sorted_df

"""**A new column 'sex_ratio' has been added to the DataFrame.**
 **This column represents the ratio of females to males in the population,**
 **expressed as the number of females per 1,000 males.**
 *SECTION-A - 4.*
"""

df['sex_ratio'] = (df['population_female'] / df['population_male']) * 1000
df

"""**This bar chart shows the total number of literates for each state.**
**The x-axis represents state names, and the y-axis represents the total number of literates.**
**The labels on the x-axis are rotated 90 degrees for better visibility.**
*SECTION-B - 1.*
"""

plt.figure(figsize=(15, 8))  # Adjust figure size for better readability
plt.bar(df['state_name'], df['literates_total'])
plt.xlabel('State Name')
plt.ylabel('Total Literates')
plt.title('Total Literates by State')
plt.xticks(rotation=90)  # Rotate x-axis labels for better visibility
plt.show()

"""**This scatter plot illustrates the relationship between the number of total** **graduates and the effective literacy rate.**
**Each point represents a city, with the x-axis showing the total number of **graduates and the y-axis showing the effective literacy rate as a  percentage.The grid lines help to better visualize the data** **distribution and relationships.**
*SECTION-B -2.*
"""

df['effective_literacy_rate'] = (df['literates_total'] / df['population_total']) * 100
plt.figure(figsize=(10, 6))
plt.scatter(df['total_graduates'], df['effective_literacy_rate'], alpha=0.8,color='purple')
plt.xlabel('Total Graduates')
plt.ylabel('Effective Literacy Rate (%)')
plt.title('Total Graduates vs Effective Literacy Rate')
plt.grid(True)
plt.show()

"""**This KDE plot shows the distribution of the 'literates_total' variable for each state.**
**The plot uses different colors to represent each state, allowing us to see how the** **distribution of total literates varies across states.**
**The 'density' on the y-axis  indicates the estimated probability density** **function for the number of literates.**
**The 'common_norm=False' parameter ensures that the densities are not **normalized across all states, allowing comparison of distributions **within each state.**
*SECTION-B - 3.*
"""

plt.figure(figsize=(12, 6))
sns.kdeplot(data=df, x='literates_total', hue='state_name', common_norm=False)
plt.title('KDE Plot of Total Literates by State')
plt.xlabel('Total Literates')
plt.ylabel('density')
plt.show()

"""**This scatter plot illustrates the relationship between the total** **population of cities and their effective literacy rate.**
**The size of each bubble represents the number of** **total graduates, scaled by a factor of 1000.The color of the bubbles  is mapped to**  **the number of graduates using the 'viridis' colormap.The grid lines help improve** **the readability of the plot and make it easier to interpret the data.**

*SECTION-B - 4.*



"""

df['effective_literacy_rate'] = df['literates_total'] / df['population_total'] * 100

# Create the scatter plot
plt.figure(figsize=(12, 8))
bubble_size = df['total_graduates'] / 1000  # Adjust the scaling factor as needed
plt.scatter(df['population_total'], df['effective_literacy_rate'],s=bubble_size, alpha=1, cmap='viridis', edgecolors='w', linewidth=0.5)
plt.xlabel('Total Population')
plt.ylabel('Effective Literacy Rate (%)')
plt.title('Relationship between Total Population and Effective Literacy Rate')
plt.grid(True)
plt.show()

"""**This figure contains four different types of plots to visualize various aspects of the dataset:**
**The subplots are arranged in a 2x2 grid for  comprehensive **visualization of the data.**
*SECTION - C -1.*
"""

# Calculate the effective literacy rate first
df['effective_literacy_rate'] = (df['literates_total'] / df['population_total']) * 100

fig, axs = plt.subplots(2, 2, figsize=(20, 15))

# Bar Plot
sns.barplot(x='state_name', y='literates_total', data=df, ci=None, ax=axs[0, 0])
axs[0, 0].set_xticklabels(axs[0, 0].get_xticklabels(), rotation=90, ha='right')
axs[0, 0].set_title('Total Literates by State')
axs[0, 0].set_xlabel('State Name')
axs[0, 0].set_ylabel('Total Literates')

# Scatter Plot
axs[0, 1].scatter(df['total_graduates'], df['effective_literacy_rate'],color='purple',edgecolors='w', linewidth=0.2) # Now this line should work
axs[0, 1].set_title('Total Graduates vs Effective Literacy Rate')
axs[0, 1].set_xlabel('Total Graduates')
axs[0, 1].set_ylabel('Effective Literacy Rate (%)')
axs[0, 1].grid(True)

# KDE Plot
sns.kdeplot(data=df, x='literates_total', hue='state_name', fill=False, ax=axs[1, 0])
axs[1, 0].set_title('KDE Plot of Literates Total by State')
axs[1, 0].set_xlabel('Total Literates')

# Bubble Plot
axs[1, 1].scatter(df['population_total'], df['effective_literacy_rate'],
                  s=df['total_graduates']/1000, alpha=0.8,cmap='viridis', edgecolors='w', linewidth=0.5)
axs[1, 1].set_title('Population vs Effective Literacy Rate with Graduates as Bubble Size')
axs[1, 1].set_xlabel('Total Population')
axs[1, 1].set_ylabel('Effective Literacy Rate (%)')
axs[1, 1].grid(True)

plt.tight_layout()
plt.show()

"""*SECTION-C- 2.*"""

# Group by state and sum the male and female populations
state_pop = df.groupby('state_name')[['population_male', 'population_female']].sum()

# Calculate the male to female population ratio
state_pop['male_female_ratio'] = state_pop['population_male'] / state_pop['population_female']

# Display the results
state_pop[['population_male', 'population_female', 'male_female_ratio']]

"""**This heatmap visualizes the male and female population ratios in the top 10 most populous states.
Each cell represents the percentage of the total population that is male or female, with states as columns and genders as rows.
The annotations show the exact percentages, and the 'viridis' colormap provides a color gradient to represent the values.**
*SECTION-C - 2.*
"""

# Calculate total population for each state
state_pop['total_population'] = state_pop['population_male'] + state_pop['population_female']

# Get the top 10 states by population
top10_states = state_pop.sort_values(by='total_population', ascending=False).head(10)

# Calculate male and female percentages for the top 10 states
top10_states['male_percentage'] = (top10_states['population_male'] / top10_states['total_population']) * 100
top10_states['female_percentage'] = (top10_states['population_female'] / top10_states['total_population']) * 100

# Prepare data for heatmap
heatmap_data = top10_states[['male_percentage', 'female_percentage']].T

# Create the heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(heatmap_data, annot=True, cmap='viridis', fmt=".1f")
plt.title('Male vs Female Population Ratio in Top 10 States')
plt.xlabel('State')
plt.ylabel('Gender')
plt.show()